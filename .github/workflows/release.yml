name: Release_Workflow
on: 
  push:
    branches:
      - master
jobs:
  Code_Analysis_Job:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - 
        name: Check out repository code
        uses: actions/checkout@v4
      - 
        name: Fetching GO version from repo
        run: echo "GO_VERSION=$(cat .go-version)" >> $GITHUB_ENV
      - 
        name: Setup GO environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - 
        name: Runing code linter using golangci tool
        uses: golangci/golangci-lint-action@v6
        with: 
          args: -v 
      -
        name: Running integration tests
        run: go test -v -coverpkg=./... -coverprofile=coverage.out ./...
        env:
          ULTRADNS_UNIT_TEST_USERNAME: ${{ secrets.ULTRADNS_UNIT_TEST_USERNAME }}
          ULTRADNS_UNIT_TEST_PASSWORD: ${{ secrets.ULTRADNS_UNIT_TEST_PASSWORD }}
          ULTRADNS_UNIT_TEST_HOST_URL: ${{ secrets.ULTRADNS_UNIT_TEST_HOST_URL }}
          ULTRADNS_UNIT_TEST_USER_AGENT: ${{ secrets.ULTRADNS_UNIT_TEST_USER_AGENT }}
          ULTRADNS_UNIT_TEST_NAME_SERVER: ${{ secrets.ULTRADNS_UNIT_TEST_NAME_SERVER }}
          ULTRADNS_UNIT_TEST_SECONDARY_ZONE_NAME: ${{ secrets.ULTRADNS_UNIT_TEST_SECONDARY_ZONE_NAME }}
          ULTRADNS_UNIT_TEST_ACCOUNT: ${{ secrets.ULTRADNS_UNIT_TEST_ACCOUNT }}
          ULTRADNS_UNIT_TEST_ACCOUNT_MIGRATE: ${{ secrets.ULTRADNS_UNIT_TEST_ACCOUNT_MIGRATE }}
      - 
        name: Fetch code coverage
        run: go tool cover -func coverage.out
      - 
        name: Fetch code coverage percentage
        run: go tool cover -func coverage.out |
             grep total | 
             awk '{print substr($3,1,length($3)-1)}' > percentage
      -
        name: Check code coverage with threshold of 90%
        run: if [[ $(cat percentage) < 90 ]]; then exit 1; fi
  Release_Job:
    runs-on: ubuntu-latest
    needs: Code_Analysis_Job
    environment: prod
    steps:
      - 
        name: Check out repository code
        uses: actions/checkout@v4
      - 
        name: Fetching GO version from repo
        run: echo "GO_VERSION=$(cat .go-version)" >> $GITHUB_ENV
      - 
        name: Setup GO environment
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
      - 
        name: Create Release Info
        run: |
          echo "SDK_VERSION=$(cat .sdk-version)" >> $GITHUB_ENV
          echo "CURRENT_TIME=$(date +'%Y%m%d%H%M%S')" >> $GITHUB_ENV
          echo "COMMIT_ID=$(git rev-parse --short "$GITHUB_SHA")" >> $GITHUB_ENV
      - 
        run: echo "RELEASE_VERSION=${{ env.SDK_VERSION }}-${{ env.CURRENT_TIME }}-${{ env.COMMIT_ID }}" >> $GITHUB_ENV
      -
        name: Update release version using go generate
        run: go generate ./internal/version
      - 
        name: Setup git config for creating Tag
        run: |
          git config user.name "GitHub Actions"
          git config user.email "<>"
      - 
        name: Update sdk version and create Tag
        run: |
          git add internal/version/version_generated.go
          git commit -m "version updated"
          git tag ${{ env.RELEASE_VERSION }}
          git push origin ${{ env.RELEASE_VERSION }}
      - 
        name: Create Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.RELEASE_VERSION }}
          release_name: ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false